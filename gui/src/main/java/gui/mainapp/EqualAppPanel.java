package gui.mainapp;

import engine.expressions.ParboiledExpressionParser;
import engine.expressions.ParsingException;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.EnumSet;
import java.util.Set;

/**
 * User: Oleksiy Pylypenko
 * Date: 3/5/13
 * Time: 7:31 AM
 */
public class EqualAppPanel {
    private JTextArea equationPad;
    private JPanel root;
    private JPanel sidePanel;
    private JButton refreshButton;
    private JSlider timeSlider;
    private JButton playButton;
    private JButton upButton;
    private JButton leftButton;
    private JButton downButton;
    private JButton rightButton;
    private JButton zoomInButton;
    private JButton zoomOutButton;
    private JLabel constantsLabel;
    private JLabel variablesLabel;
    private EqualViewport equalViewport;
    private final UpdateViewListener updateViewListener;

    public EqualAppPanel(final ViewModel viewModel) {
        updateViewListener = new UpdateViewListener(viewModel);
        $$$setupUI$$$();
        equalViewport.setParser(new ParboiledExpressionParser());

        viewModel.addViewListener(updateViewListener);

        new ViewModelAction(viewModel, ViewModel.ActionType.REFRESH)
                .fillTextAndIcon(refreshButton)
                .putActionMap(root)
                .bindKey(root, KeyStroke.getKeyStroke("F5"))
                .bind(refreshButton);

        bindAction(viewModel, refreshButton, KeyStroke.getKeyStroke("F5"), ViewModel.ActionType.REFRESH);
        bindAction(viewModel, playButton, KeyStroke.getKeyStroke("F6"), ViewModel.ActionType.PLAY);
        bindAction(viewModel, zoomInButton, KeyStroke.getKeyStroke("F7"), ViewModel.ActionType.ZOOM_IN);
        bindAction(viewModel, zoomOutButton, KeyStroke.getKeyStroke("F8"), ViewModel.ActionType.ZOOM_OUT);
        bindAction(viewModel, leftButton, KeyStroke.getKeyStroke("F9"), ViewModel.ActionType.LEFT);
        bindAction(viewModel, upButton, KeyStroke.getKeyStroke("F10"), ViewModel.ActionType.UP);
        bindAction(viewModel, downButton, KeyStroke.getKeyStroke("F11"), ViewModel.ActionType.DOWN);
        bindAction(viewModel, rightButton, KeyStroke.getKeyStroke("F12"), ViewModel.ActionType.RIGHT);

        equationPad
                .getDocument()
                .addDocumentListener(
                        new EquationUpdater(viewModel));

        timeSlider.addChangeListener(new TimeSliderUpdater(viewModel));
    }

    private void bindAction(ViewModel viewModel,
                            JButton button,
                            KeyStroke key,
                            ViewModel.ActionType actionType) {
        new ViewModelAction(viewModel, actionType)
                .fillTextAndIcon(button)
                .putActionMap(root)
                .bindKey(root, key)
                .bind(button);
    }

    public void createUIComponents() {
        equalViewport = new EqualViewport();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new BorderLayout(0, 0));
        sidePanel = new JPanel();
        sidePanel.setLayout(new BorderLayout(0, 0));
        root.add(sidePanel, BorderLayout.WEST);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        sidePanel.add(panel1, BorderLayout.SOUTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        panel1.add(panel2, gbc);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Controls"));
        rightButton = new JButton();
        rightButton.setHorizontalTextPosition(11);
        rightButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/right-arrow.png")));
        rightButton.setText("F12");
        rightButton.setToolTipText("Move viewport right");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(rightButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.ipady = 10;
        panel2.add(spacer1, gbc);
        playButton = new JButton();
        playButton.setHorizontalTextPosition(11);
        playButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/play.png")));
        playButton.setText(" F6");
        playButton.setToolTipText("Run time series of graphics by changing \"t\" from 0 to 1 ");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(playButton, gbc);
        zoomInButton = new JButton();
        zoomInButton.setHorizontalTextPosition(10);
        zoomInButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/zoom-in.png")));
        zoomInButton.setText("F7");
        zoomInButton.setToolTipText("Zoom in viewport");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(zoomInButton, gbc);
        zoomOutButton = new JButton();
        zoomOutButton.setHorizontalTextPosition(11);
        zoomOutButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/zoom-out.png")));
        zoomOutButton.setText("F8");
        zoomOutButton.setToolTipText("Zoom out viewport");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(zoomOutButton, gbc);
        refreshButton = new JButton();
        refreshButton.setHorizontalTextPosition(10);
        refreshButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/reload.png")));
        refreshButton.setText("F5");
        refreshButton.setToolTipText("Refresh image and set \"t\" to zero");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(refreshButton, gbc);
        leftButton = new JButton();
        leftButton.setHorizontalTextPosition(10);
        leftButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/left-arrow.png")));
        leftButton.setText("F9");
        leftButton.setToolTipText("Move viewport left");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(leftButton, gbc);
        upButton = new JButton();
        upButton.setHorizontalTextPosition(11);
        upButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/up-arrow.png")));
        upButton.setText("F10");
        upButton.setToolTipText("Move viewort up");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(upButton, gbc);
        downButton = new JButton();
        downButton.setHorizontalTextPosition(10);
        downButton.setIcon(new ImageIcon(getClass().getResource("/gui/mainapp/down-arrow.png")));
        downButton.setText("F11");
        downButton.setToolTipText("Move viewport down");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(downButton, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        sidePanel.add(scrollPane1, BorderLayout.CENTER);
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Equations"));
        equationPad = new JTextArea();
        equationPad.setColumns(30);
        equationPad.setText("coords(5,1)\ny=\n");
        equationPad.putClientProperty("html.disable", Boolean.TRUE);
        scrollPane1.setViewportView(equationPad);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        root.add(panel3, BorderLayout.CENTER);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        panel3.add(panel4, BorderLayout.SOUTH);
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "'t' control"));
        timeSlider = new JSlider();
        timeSlider.setSnapToTicks(true);
        timeSlider.setValue(0);
        timeSlider.putClientProperty("JSlider.isFilled", Boolean.FALSE);
        timeSlider.putClientProperty("html.disable", Boolean.FALSE);
        timeSlider.putClientProperty("Slider.paintThumbArrowShape", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 100.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(timeSlider, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(0, 0));
        panel3.add(panel5, BorderLayout.CENTER);
        panel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), "Viewport"));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new BorderLayout(0, 0));
        panel6.setBackground(Color.white);
        panel5.add(panel6, BorderLayout.CENTER);
        panel6.add(equalViewport, BorderLayout.CENTER);
        final JToolBar toolBar1 = new JToolBar();
        root.add(toolBar1, BorderLayout.SOUTH);
        constantsLabel = new JLabel();
        constantsLabel.setText("LEFT(-10) TOP(10) RIGHT(10) BOTTOM(-10) STEPS(100) WIDTH(800) HEIGHT(600)");
        toolBar1.add(constantsLabel);
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        toolBar1.add(toolBar$Separator1);
        variablesLabel = new JLabel();
        variablesLabel.setText("t(0)");
        toolBar1.add(variablesLabel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    public void beAContentPaneOf(JFrame frame) {
        frame.setContentPane(root);
    }

    private class EquationUpdater implements DocumentListener, Runnable {
        private final ViewModel viewModel;

        public EquationUpdater(ViewModel viewModel) {
            this.viewModel = viewModel;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateModel();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateModel();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateModel();
        }

        private void updateModel() {
            updateViewListener.withDisabled(ViewModel.InterfacePart.EQUATION, this);
        }

        @Override
        public void run() {
            viewModel.setEquations(equationPad.getText());
        }
    }

    private class InterfaceUpdater implements ViewModel.InterfacePartVisitor {
        private final ViewModel viewModel;

        public InterfaceUpdater(ViewModel viewModel) {
            this.viewModel = viewModel;
        }

        @Override
        public void constants() {
            constantsLabel.setText(viewModel.getConstantsStatus());
        }

        @Override
        public void variables() {
            variablesLabel.setText(viewModel.getVariablesStatus());
        }

        @Override
        public void equation() {
            equationPad.setText(viewModel.getEquations());
        }

        @Override
        public void viewport() {
            try {
                equalViewport.setViewportBounds(viewModel.getViewportBounds());
                equalViewport.setExpression(viewModel.getEquations());
            } catch (ParsingException e) {
                System.out.println(e);
            }
        }

        @Override
        public void timeControl() {
            timeSlider.setMinimum(0);
            timeSlider.setMaximum(viewModel.getSteps());
            timeSlider.setValue(viewModel.getT());
        }
    }

    private class UpdateViewListener implements ViewModel.ViewListener {
        private final ViewModel viewModel;
        private Set<ViewModel.InterfacePart> disabled;

        public UpdateViewListener(ViewModel viewModel) {
            this.viewModel = viewModel;
        }

        public void withDisabled(ViewModel.InterfacePart disabledPart, Runnable runnable) {
            Set<ViewModel.InterfacePart> prevDisabled = disabled;
            disabled = EnumSet.of(disabledPart);
            runnable.run();
            disabled = prevDisabled;
        }

        @Override
        public void onUpdate(Set<ViewModel.InterfacePart> parts) {
            for (ViewModel.InterfacePart part : parts) {
                if (disabled != null && disabled.contains(part)) {
                    continue;
                }
                part.accept(new InterfaceUpdater(viewModel));
            }
        }
    }

    private class TimeSliderUpdater implements ChangeListener, Runnable {
        private final ViewModel viewModel;

        public TimeSliderUpdater(ViewModel viewModel) {
            this.viewModel = viewModel;
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            updateViewListener.withDisabled(ViewModel.InterfacePart.TIME_CONTROL, this);
        }

        @Override
        public void run() {
            viewModel.setT(timeSlider.getValue());
        }
    }
}
